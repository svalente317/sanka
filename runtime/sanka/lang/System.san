// -*- mode: Java; -*-
package sanka.lang;

class System {
    c__include "stdio.h";
    c__include "stdlib.h";
    c__include "string.h";
    c__include "unistd.h";
    c__include "sys/time.h";
    c__include "time.h";

    static void print(String text) {
        c__stmt "fputs(text, stdout)";
    }

    static void println(String text) {
        c__stmt "puts(text)";
    }

    static String strerror(int error) {
        c__stmt "return strerror(error)";
    }

    static long currentTimeMillis() {
        c__stmt "struct timeval now";
        c__stmt "gettimeofday(&now, NULL)";
        c__stmt "return ((long long)now.tv_sec)*1000 + (now.tv_usec/1000)";
    }

    static String formatTime(String format, long time, boolean local) {
        c__stmt "time_t t = (time_t)(time / 1000)";
        c__stmt "struct tm tm";
        c__stmt "if (local) localtime_r(&t, &tm); else gmtime_r(&t, &tm)";
        c__stmt "char buffer[80]";
        c__stmt "struct array a";
        c__stmt "a.data = buffer";
        c__stmt "a.length = strftime(buffer, 80, format, &tm)";
        c__stmt "return NEW_STRING(&a)";
    }

    static void sleep(int millis) {
        c__stmt "usleep(millis * 1000)";
    }

    static int random(int max) {
        c__stmt "return random() % max";
    }

    static void gc() {
        c__stmt "while (GC_collect_a_little() != 0)";
    }

    static long parseLong(String text) {
        c__stmt "return strtol(text, NULL, 0)";
    }

    static int parseInt(String text) {
        c__stmt "return (int) strtol(text, NULL, 0)";
    }

    static void sort(String[] arr) {
        c__stmt "qsort(arr->data, arr->length, sizeof(char*), STRING_QSORT_CMP)";
    }

    static int getuid() {
        c__stmt "return getuid()";
    }

    static void seedRandom() {
        // This is obviously not cryptographically secure but it will
        // get you randomness for a card game or something.
        var seed = currentTimeMillis();
        c__stmt "srandom(seed)";
    }

    static String randomUuid() {
        var result = new byte[35];
        var id = 0L;
        var length = 0;
        for (var x = 0; x < 5; x++) {
            c__stmt "id = random()";
            for (var y = 0; y < 7; y++) {
                var value = id & 15;
                var digit = (value < 10) ? '0' + value : 'a' + (value-10);
                result[length] = digit;
                length++;
                id = id >> 4;
            }
        }
        var text = new String(result);
        return text.substring(0, 8) + "-" + text.substring(8, 12) + "-" +
            text.substring(12, 16) + "-" + text.substring(16, 20) + "-" +
            text.substring(20, 32);
    }
}
