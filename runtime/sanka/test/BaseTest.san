// -*- mode: Java; -*-
package sanka.test;
import sanka.io.File;
import sanka.io.FileStats;

abstract class BaseTest {

    private int failureCount;

    void assert(boolean value, String text) {
        if (!value) {
            System.println("FAIL: " + text);
            this.failureCount++;
        }
    }

    void assertEquals(int expected, int actual, String text) {
        if (expected != actual) {
            System.println("FAIL: " + text + ": expected=" + expected +
                " actual=" + actual);
            this.failureCount++;
        }
    }

    void assertString(String expected, String actual, String text) {
        if (expected != actual) {
            System.println("FAIL: " + text + ": expected=" + expected +
                " actual=" + actual);
            this.failureCount++;
        }
    }

    int getFailureCount() {
        return this.failureCount;
    }

    int exit() {
        if (this.failureCount == 0) {
            System.println("ok");
        }
        return this.failureCount;
    }

    int removeDirectory(File directory) {
        var failureCount = 0;
        var names = directory.list();
        if (names == null) {
            failureCount++;
        } else {
            var stats = new FileStats();
            for (var name : names) {
                var child = new File(directory, name);
                stats.isDirectory = false;
                if (child.getStats(stats, false) != 0) {
                    failureCount++;
                }
                if (stats.isDirectory) {
                    var results = removeDirectory(child);
                    failureCount = failureCount + results;
                } else {
                    if (!child.delete()) {
                        failureCount++;
                    }
                }
            }
            if (!directory.delete()) {
                failureCount++;
            }
        }
        return failureCount;
    }
}
