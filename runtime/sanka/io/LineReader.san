// -*- mode: Java; -*-
package sanka.io;

/**
 * LineReader reads blocks of data from a plain reader, and it caches,
 * joins, and divides the data into lines that are terminated LF (\n).
 */
class LineReader {
    const MAX_LINE_LENGTH = 8096;

    private int maxLineLength;
    private Reader reader;
    private byte[]? prefix;

    LineReader(Reader reader) {
        this.maxLineLength = MAX_LINE_LENGTH;
        this.reader = reader;
        this.prefix = null;
    }

    void setMaxLineLength(int value) {
        this.maxLineLength = value;
    }

    /**
     * Read the next line of data from the stream. The line may be terminated
     * by either CR LF or just LF. In either case, the final CR and LF are
     * stripped. (They are not returned with the line. No other whitespace
     * is stripped.)
     *
     * If CR is not followed by LF, then the CR is part of the line.
     *
     * If possible, then this will respond immediately with data that has
     * already been read from the stream and cached. Otherwise, it will try
     * to respond with data that is immediately available from the stream.
     * Finally, if necessary, it will block until the stream provides data
     * that terminates the line.
     *
     * If the stream reaches 8096 bytes without LF, then this returns that
     * block of data as a line. And the next line starts with the next byte.
     *
     * @return the next line from the stream
     */
    String readline() {
        var eol = -1;
        if (this.prefix != null) {
            eol = findByte(this.prefix, '\n');
            if (eol >= 0) {
                var line = this.prefix;
                this.prefix = arraySuffix(this.prefix, eol+1);
                if (eol > 0 && line[eol-1] == '\r') {
                    eol--;
                }
                line.setLength(eol);
                return new String(line);
            }
        }
        var buffer = null;
        var next = 0;
        while (true) {
            buffer = new byte[](1024);
            var len = this.reader.read(buffer);
            if (len <= 0) {
                buffer = this.prefix;
                this.prefix = null;
                return buffer == null ? null : new String(buffer);
            }
            buffer.setLength(len);
            eol = findByte(buffer, '\n');
            if (eol >= 0) {
                next = eol+1;
                break;
            }
            if (this.prefix == null) {
                this.prefix = buffer;
                continue;
            }
            next = this.maxLineLength - this.prefix.length;
            if (next >= 0 && next < len) {
                break;
            }
            this.prefix.addAll(buffer);
        }
        var newPrefix = arraySuffix(buffer, next);
        buffer.setLength(next);
        if (this.prefix != null) {
            this.prefix.addAll(buffer);
            buffer = this.prefix;
        }
        this.prefix = newPrefix;
        if (buffer.length > 0 && buffer[buffer.length-1] == '\n') {
            buffer.setLength(buffer.length-1);
            if (buffer.length > 0 && buffer[buffer.length-1] == '\r') {
                buffer.setLength(buffer.length-1);
            }
        }
        return new String(buffer);
    }

    private int findByte(byte[] arr, byte target) {
        for (var idx = 0; idx < arr.length; idx++) {
            if (arr[idx] == target) {
                return idx;
            }
        }
        return -1;
    }

    private byte[] arraySuffix(byte[] arr, int start) {
        if (arr.length == start) {
            return null;
        }
        var suffix = new byte[](arr.length - start);
        for (var idx = 0; idx < suffix.length; idx++) {
            suffix[idx] = arr[start+idx];
        }
        return suffix;
    }

    /**
     * Read buffer.length bytes from the cache and stream into the buffer.
     * This blocks as long as necessary, and it issues as many read
     * operations as necessary to fully fill the buffer.
     *
     * @return the number of bytes read, which will be buffer.length unless
     *         the stream closed or ther was an error.
     */
    int read(byte[] buffer) {
        var idx = 0;
        var data = null;
        var dlen = 0;
        var readBuffer = null;
        while (idx < buffer.length) {
            if (this.prefix != null) {
                data = this.prefix;
                dlen = data.length;
                this.prefix = null;
            } else {
                if (readBuffer == null) {
                    readBuffer = new byte[](1024);
                    data = readBuffer;
                }
                dlen = this.reader.read(data);
                if (dlen <= 0) {
                    return idx;
                }
            }
            var count = buffer.length - idx;
            if (count > dlen) {
                count = dlen;
            }
            for (var i = 0; i < count; i++) {
                buffer[idx] = data[i];
                idx++;
            }
            if (dlen > count) {
                data.setLength(dlen);
                data.delete(0, count);
                this.prefix = data;
            }
        }
        return idx;
    }

    int close() {
        return this.reader.close();
    }
}
