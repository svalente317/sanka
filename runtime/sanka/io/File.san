// -*- mode: Java; -*-
package sanka.io;

/**
 * An abstract representation of file and directory pathnames.
 */
class File {
    c__include "sys/types.h";
    c__include "sys/stat.h";
    c__include "unistd.h";
    c__include "errno.h";
    c__include "dirent.h";
    c__include "stdio.h";

    const PATH_SEPARATOR = "/";

    private String pathname;

    /**
     * Creates a new File instance by converting the given pathname
     * string into an abstract pathname. The pathname may be absolute
     * or relative.
     */
    File(String pathname) {
        this.pathname = pathname;
    }

    /**
     * Creates a new File instance from a parent directory and a child
     * pathname. The child must be relative, not absolute.
     */
    File(File parent, String child) {
        this.pathname = parent.getPath();
        if (this.pathname.endsWith(PATH_SEPARATOR)) {
            if (child.startsWith(PATH_SEPARATOR)) {
                child = child.substring(1);
            }
        } else {
            if (!child.startsWith(PATH_SEPARATOR)) {
                child = PATH_SEPARATOR + child;
            }
        }
        this.pathname = this.pathname + child;
    }

    /**
     * Get the unprocessed pathname that this File represents.
     * Since the pathname is unprocessed and non-canonical, it may be
     * absolute or relative, it may contain segments that are links
     * including "..", etc., it may name subdirectories that do not
     * currently exist or that are currently not directories, etc.
     */
    String getPath() {
        return this.pathname;
    }

    String toString() {
        return this.pathname;
    }

    /**
     * Get stats about a file or directory.
     *
     * If the named file or directory does not exist in the filesystem
     * then return null.
     */
    int getStats(FileStats stats, boolean followLink) {
        c__stmt "struct stat statbuf";
        c__stmt "int status";
        if (followLink) {
            c__stmt "status = stat(this->pathname, &statbuf)";
        } else {
            c__stmt "status = lstat(this->pathname, &statbuf)";
        }
        c__stmt "if (status < 0) return errno";
        c__stmt "stats->isFile = S_ISREG(statbuf.st_mode)";
        c__stmt "stats->isDirectory = S_ISDIR(statbuf.st_mode)";
        c__stmt "stats->isLink = S_ISLNK(statbuf.st_mode)";
        c__stmt "stats->lastModified = statbuf.st_mtime*1000";
        c__stmt "stats->length = statbuf.st_size";
        c__stmt "stats->uid = statbuf.st_uid";
        c__stmt "stats->gid = statbuf.st_gid";
        return 0;
    }

    /**
     * If this file is a directory, then return the names of the files
     * and subdirectories in this directory.
     *
     * (Do not return "." or "..")
     */
    String[] list() {
        var results = new String[];
        var filename = "";
        c__stmt "struct dirent *entry";
        c__stmt "DIR *dir = opendir(this->pathname)";
        c__stmt "if (dir == NULL) return NULL";
        while (true) {
            c__stmt "entry = readdir(dir)";
            c__stmt "if (entry == NULL) break";
            c__stmt "char *name = entry->d_name";
            c__stmt "if (name[0] == '.' && (name[1] == 0 || (name[1] == '.' && name[2] == 0))) continue";
            c__stmt "filename = STRING_SUBSTRING(name, 0, 0, 1)";
            results.add(filename);
        }
        c__stmt "closedir(dir)";
        return results;
    }

    /**
     * Return an abstract representation of a parent directory that could
     * contain this file or directory.
     *
     * This can be fooled by symbolic links and hard links including ".."
     */
    File? getParent() {
        var strip = this.pathname;
        var done = false;
        while (!done) {
            var len = strip.length();
            var origLen = len;
            while (len > 0 && strip[len-1] == '/') {
                len--;
            }
            if (len == 0) {
                return null;
            }
            if (len < origLen) {
                strip = strip.substring(0, len);
            }
            var idx = strip.lastIndexOf('/');
            if (idx < 0) {
                return null;
            }
            done = !((idx+2 == len) && (strip[idx+1] == '.'));
            strip = strip.substring(0, idx);
        }
        return new File(strip);
    }

    /**
     * Get the name of this file in its parent directory.
     */
    String getName() {
        var idx = this.pathname.lastIndexOf('/');
        return idx < 0 ? this.pathname : this.pathname.substring(idx+1);
    }

    /**
     * Create the directory named by this abstract pathname, including any
     * missing parent directories. Note that if this operation fails, it may
     * have created some of the parent directories.
     *
     * @return true if and only if the directory was created
     */
    boolean mkdirs() {
        var stats = new FileStats();
        if (getStats(stats, true) == 0) {
            return false;
        }
        var parent = getParent();
        if (parent != null) {
            parent.mkdirs();
        }
        var status = 0;
        c__stmt "status = mkdir(this->pathname, 0777)";
        return (status == 0);
    }

    /**
     * Delete the file or directory denoted by this abstract pathname.
     * If this pathname denotes a directory, then the directory must be empty
     * in order to be deleted.
     *
     * @return true if the file or directory is successfully deleted
     */
    boolean delete() {
        var status = 0;
        var isDirectory = false;
        c__stmt "status = remove(this->pathname)";
        c__stmt "isDirectory = (status != 0) && (errno == EISDIR)";
        if (isDirectory) {
            c__stmt "status = rmdir(this->pathname)";
        }
        return (status == 0);
    }

    /**
     * Rename the file denoted by this abstract pathname.
     *
     * Platform-dependent: The operation might not be able to move a file
     * from one filesystem to another, it might not be atomic, and it
     * might not succeed if the target file already exists.
     *
     * @return true if and only if the renaming succeeded
     */
    boolean renameTo(File dest) {
        var status = 0;
        c__stmt "status = rename(this->pathname, dest->pathname)";
        return (status == 0);
    }
}
