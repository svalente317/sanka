// -*- mode: Java; -*-
package sanka.io;

class IOUtils {
    /**
     * Read entire contents of stream into memory.
     */
    static byte[] readStream(Reader reader) {
        var chain = new byte[][0];
        while (true) {
            var data = new byte[4096];
            var status = reader.read(data);
            if (status <= 0) {
                break;
            }
            if (status < data.length) {
                data.setLength(status);
            }
            chain.add(data);
        }
        if (chain.length == 0) {
            return null;
        }
        var size = 0;
        for (var data : chain) {
            size = size + data.length;
        }
        var results = new byte[size];
        results.setLength(0);
        for (var data : chain) {
            results.addAll(data);
        }
        return results;
    }

    /**
     * Open the file, read the contents, and close the stream.
     */
    static byte[] readFile(String filename) {
        var reader = new FileReader();
        if (reader.open(filename) != 0) {
            return null;
        }
        var contents = reader.readFile();
        reader.close();
        return contents;
    }

    /**
     * Open the text file, read the contents, and close the stream.
     */
    static String readFileAsString(String filename) {
        var body = IOUtils.readFile(filename);
        return body == null ? null : new String(body);
    }

    /**
     * Recursively remove the given directory and its contents.
     */
    static int removeDirectory(File directory) {
        var failureCount = 0;
        var names = directory.list();
        if (names == null) {
            failureCount++;
        } else {
            var stats = new FileStats();
            for (var name : names) {
                var child = new File(directory, name);
                stats.isDirectory = false;
                if (child.getStats(stats, false) != 0) {
                    failureCount++;
                }
                if (stats.isDirectory) {
                    var results = removeDirectory(child);
                    failureCount = failureCount + results;
                } else {
                    if (!child.delete()) {
                        failureCount++;
                    }
                }
            }
            if (!directory.delete()) {
                failureCount++;
            }
        }
        return failureCount;
    }
}
