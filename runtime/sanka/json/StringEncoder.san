// -*- mode: Java; -*-
package sanka.json;

singleton class StringEncoder {
    private []byte map;

    StringEncoder() {
        this.map = new []byte(128);
        this.map['\\'] = '\\';
        this.map['\"'] = '"';
        this.map['\b'] = 'b';
        this.map['\f'] = 'f';
        this.map['\n'] = 'n';
        this.map['\r'] = 'r';
        this.map['\t'] = 't';
    }

    String encode(String str) {
        var out = new []byte(str.length()*2);
        var idx = 0;
        var escapes = 0;
        for (var ch : str) {
            if (ch > 0) {
                var enc = this.map[ch];
                if (enc > 0) {
                    out[idx] = '\\';
                    idx++;
                    out[idx] = enc;
                    idx++;
                    escapes++;
                    continue;
                }
            }
            // TODO Encode control characters and illegal two-byte sequences
            out[idx] = ch;
            idx++;
        }
        if (escapes == 0) {
            return str;
        }
        out.setLength(idx);
        return new String(out);
    }

    String encodeAndQuote(String str) {
        return "\"" + encode(str) + "\"";
    }
}
