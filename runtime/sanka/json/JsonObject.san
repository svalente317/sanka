// -*- mode: Java; -*-
package sanka.json;

class JsonMember {
    String key;
    JsonElement value;

    JsonMember(String key, JsonElement value) {
        this.key = key;
        this.value = value;
    }
}

/**
 * JsonObject is a list of String -> JsonElement pairs.
 * It does not use a map, so it maintains the order that the keys are added
 * to the object.
 *
 * Here's how all the "get" methods work:
 *
 * If the field is defined, AND the field has the specified type, then
 * return the field value.
 * Otherwise -- if the field is not defined, or the field does not have
 * the specified type -- then return the default value for the type
 * (false for boolean, 0 for int, null for string, etc.)
 */
class JsonObject {
    private static JsonElement? NULL_ELEMENT;
    private JsonMember[] members;

    JsonObject() {
        this.members = new JsonMember[];
    }

    JsonElement? get(String fieldName) {
        for (var member : this.members) {
            if (member.key == fieldName) {
                return member.value;
            }
        }
        return null;
    }

    void set(String fieldName, JsonElement value) {
        for (var member : this.members) {
            if (member.key == fieldName) {
                member.value = value;
                return;
            }
        }
        this.members.add(new JsonMember(fieldName, value));
    }

    void remove(String fieldName) {
        for (var idx = 0; idx < this.members.length; idx++) {
            if (this.members[idx].key == fieldName) {
                this.members.delete(idx, 1);
                return;
            }
        }
    }

    /**
     * If the field is defined then return the value.
     * Otherwise, return a JsonElement with type == NULL_TYPE.
     *
     * Why return a JsonElement instead of null? So that you can safely
     * call JsonElement methods on the return value.
     */
    private JsonElement getElement(String fieldName) {
        var value = get(fieldName);
        if value == null {
            if NULL_ELEMENT == null {
                NULL_ELEMENT = new JsonElement();
            }
            return assert NULL_ELEMENT;
        }
        return value;
    }

    boolean getBoolean(String fieldName) {
        return getElement(fieldName).getAsBoolean();
    }

    short getShort(String fieldName) {
        return getElement(fieldName).getAsShort();
    }

    int getInt(String fieldName) {
        return getElement(fieldName).getAsInt();
    }

    long getLong(String fieldName) {
        return getElement(fieldName).getAsLong();
    }

    float getFloat(String fieldName) {
        return getElement(fieldName).getAsFloat();
    }

    double getDouble(String fieldName) {
        return getElement(fieldName).getAsDouble();
    }

    String? getString(String fieldName) {
        return getElement(fieldName).getAsString();
    }

    JsonElement[]? getArray(String fieldName) {
        return getElement(fieldName).getAsArray();
    }

    JsonObject? getObject(String fieldName) {
        return getElement(fieldName).getAsObject();
    }

    String toString() {
        var s = "";
        var comma = "";
        for (var member : this.members) {
            s = s + comma + StringEncoder.get().encodeAndQuote(member.key) +
                ":" + member.value.toString();
            comma = ",";
        }
        return "{" + s + "}";
    }

    static JsonObject? parse(String text) {
        var elem = JsonParser.parse(text);
        if elem == null {
            return null;
        }
        return elem.getAsObject();
    }

    void setBoolean(String fieldName, boolean value) {
        set(fieldName, new JsonElement().makeBoolean(value));
    }

    void setShort(String fieldName, short value) {
        set(fieldName, new JsonElement().makeShort(value));
    }

    void setInt(String fieldName, int value) {
        set(fieldName, new JsonElement().makeInt(value));
    }

    void setLong(String fieldName, long value) {
        set(fieldName, new JsonElement().makeLong(value));
    }

    void setFloat(String fieldName, float value) {
        set(fieldName, new JsonElement().makeDouble(value));
    }

    void setDouble(String fieldName, double value) {
        set(fieldName, new JsonElement().makeDouble(value));
    }

    void setString(String fieldName, String value) {
        set(fieldName, new JsonElement().makeString(value));
    }

    void setArray(String fieldName, JsonElement[] value) {
        set(fieldName, new JsonElement().makeArray(value));
    }

    void setObject(String fieldName, JsonObject value) {
        set(fieldName, new JsonElement().makeObject(value));
    }

    /**
     * Return the members so the caller can iterate over them.
     * This is the actual data. If you modify it, then you modify
     * the JsonObject.
     */
    JsonMember[] getMembers() {
        return this.members;
    }

    JsonObject getAsObject() {
        return this;
    }

    JsonElement toJson() {
        return new JsonElement().makeObject(this);
    }

    void fromJson(JsonElement element) {
        var obj = element.getAsObject();
        if (obj != null) {
            this.members = obj.members;
        }
    }
}
