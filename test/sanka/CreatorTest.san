// -*- mode: Java; -*-
package sanka.test;

class PlainObject {
    String s;
    int i;
}

class CreatorTest extends BaseTest {
    void run() {
        var results = new String[];
        for (var s : new String[]{"verbose", "syntax"}) {
            results.add(s);
        }
        for (var s : {"Hello", null, "world!"}) {
            results.add("" + s);
        }
        for (var i : {1, 2, 3}) {
            results.add("" + i);
        }
        for (var k, v : new map[String]String{"one": "v1", "two": "v2"}) {
            results.add(k + ":" + v);
        }
        for (var k, v : {"one": 1, "two": 2}) {
            results.add(k + ":" + v);
        }
        for (var k, v : {1: "one", 2: "two"}) {
            results.add("" + k + ":" + v);
        }
        var expected = {
            "verbose", "syntax",
            "Hello", "null", "world!",
            "1", "2", "3",
            "one:v1", "two:v2",
            "one:1", "two:2",
            "1:one", "2:two"
        };
        for (var idx = 0; idx < expected.length; idx++) {
            assertString(expected[idx], results[idx], "value at idx=" + idx);
        }

        var obj = new PlainObject(){s: "hello", i: 17};
        assertString("hello", obj.s, "creator string");
        assertEquals(17, obj.i, "creator int");

        // It's all a single expression.
        assertEquals(99, new PlainObject(){i: 99}.i, "creator expr");
    }

    static int main(String[] argv) {
        var test = new CreatorTest();
        test.run();
        return test.exit();
    }
}
