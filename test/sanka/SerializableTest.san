// -*- mode: Java; -*-
package sanka.test;
import sanka.json.JsonElement;
import sanka.json.JsonObject;
import sanka.util.Integer;

serializable class Dummy {
    String key;

    Dummy() {
        this.key = "value";
    }
}

serializable class ScalarTest {
    Integer key;
}

serializable class SerializableClass {
    short  s;
    int    i;
    long   lg;
    String str;
    String nullString;
    Dummy  d;
    Dummy  nullDummy;

    short[]  shortArr;
    int[]    nullArr;
    long[]   longArr;
    String[] stringArr;
    Dummy[]  dummyArr;

    void setup() {
        this.s = -1000;
        this.i = 8888;
        this.lg = -2345678901;
        this.str = "column 1" + new byte(9) + "column 2";
        this.d = new Dummy();

        this.shortArr = new short[]{ 256, -1 };
        this.longArr = new long[]{ 54321098765, 17 };
        this.stringArr = new String[]{ "x", "y", "z" };
        this.dummyArr = new Dummy[]{ new Dummy(), null, new Dummy() };
    }
}

class SerializableTest extends BaseTest {
    void testSerializableClass() {
        var st = new SerializableClass();
        st.setup();
        var jo = st.toJson().getAsObject();

        var t = new SerializableClass();
        t.fromJson(new JsonElement().makeObject(jo));
        assert(t.s == -1000, "short");
        assert(t.i == 8888, "int");
        assert(t.lg == -2345678901, "long");
        assert(t.str == "column 1" + new byte(9) + "column 2", "string");
        assert(t.nullString == null, "null string");
        assert(t.shortArr.length == 2, "short array");
        assert(t.nullArr == null, "null array");
        assert(t.longArr.length == 2, "long array");
        assert(t.stringArr.length == 3, "string array");
        assert(t.longArr[0] == 54321098765, "long array contents");
        assert(t.d.key == "value", "class");
        assert(t.nullDummy == null,  "null class");
        assert(t.dummyArr.length == 3, "class array");
        assert(t.dummyArr[1] == null, "class array null");
        assert(t.dummyArr[2].key == "value", "class array item");

        var text = "{\"s\":\"string\", \"xxx\":17, \"STR\":0, " +
            "\"i\":5, \"lg\":null, \"shortArr\":[\"a\", 1.1, null], " +
            "\"stringArr\":[null, 1]}";
        jo = JsonObject.parse(text);
        t = new SerializableClass();
        t.fromJsonObject(jo);
        assert(t.i == 5, "json to class");

        text = "{\"dummyArr\":[{\"key\":\"v1\"},null,{\"key\":\"v2\"}]}";
        jo = JsonObject.parse(text);
        t.nullArr = new int[1];
        t.fromJsonObject(jo);
        assert(t.nullArr == null, "j null array");
        assert(t.dummyArr.length == 3, "j array");
        assert(t.dummyArr[0].key == "v1", "j array 0");
        assert(t.dummyArr[1] == null, "j array 1");
        assert(t.dummyArr[2].key == "v2", "j array 2");

        var s = new ScalarTest();
        text = "{\"key\": 17}";
        jo = JsonObject.parse(text);
        s.fromJsonObject(jo);
        assert(s.key.intValue() == 17, "Integer");
        jo = JsonObject.parse("{}");
        s.fromJsonObject(jo);
        assert(s.key == null, "null Integer");
    }

    static int main(String[] argv) {
        var test = new SerializableTest();
        test.testSerializableClass();
        return test.exit();
    }
}
