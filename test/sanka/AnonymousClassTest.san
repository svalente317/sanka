// -*- mode: Java; -*-
package sanka.test;
import sanka.lang.Runnable;

class AnonymousMaker {
    String firstName;
    String lastName;

    String append(String x, String y) {
        return x + " " + y;
    }

    Runnable makeRunnable(String[] results) {
        return new {
            // In these assignments, the RHS is evaluated in the current
            // context. So they can access "this", instance methods,
            // local variables, etc. The results of these expressions
            // are stored in the new Runnable object.
            //
            fullName: append(this.firstName, this.lastName);
            results: results;

            // run() is a method in the new unnamed class.
            // This class has no relationship to the AnonymousMaker class.
            // It's not a subclass, it can't access instance or local
            // variables, etc.
            //
            void run() {
                this.results.add(this.fullName);
            }
        };
    }
}

class AnonymousClassTest extends BaseTest {
    /**
     * Briefly create an instance of the AnonymousMaker class. The instance
     * is used and then discarded. When this function returns, that object
     * may be garbage collected, but the new Runnable object remain live.
     */
    Runnable makeRunnableOnly(String[] results) {
        var parent = new AnonymousMaker();
        parent.firstName = "John";
        parent.lastName = "Doe";
        return parent.makeRunnable(results);
    }

    void testAnonymousClass() {
        var results = new String[];
        var runnable = makeRunnableOnly(results);
        runnable.run();
        assertString("John Doe", results[0], "runnable results");
    }

    static int main(String[] argv) {
        var test = new AnonymousClassTest();
        test.testAnonymousClass();
        return test.exit();
    }
}
