// -*- mode: Java; -*-
package sanka.examples;
import sanka.lang.Runnable;

class AnonymousMaker {
    String firstName;
    String lastName;

    String append(String x, String y) {
        return x + " " + y;
    }

    Runnable makeRunnable(int parameter) {
        return new {
            // In these assignments, the RHS is evaluated in the current
            // context. So they can access "this", instance methods,
            // local variables, etc. The results of these expressions
            // are stored in the new Runnable object.
            //
            fullName: append(this.firstName, this.lastName);
            value: parameter;

            // run() is a method in the new unnamed class.
            // This class has no relationship to the AnonymousMaker class.
            // It's not a subclass, it can't access instance or local
            // variables, etc.
            //
            void run() {
                System.println("fullName is " + this.fullName);
                System.println("value is " + this.value);
            }
        };
    }
}

class ATMainClass {
    /**
     * Briefly create an instance of the AnonymousMaker class. The instance
     * is used and then discarded. When this function returns, that object
     * may be garbage collected, but the new Runnable object remain live.
     */
    static Runnable makeRunnableOnly() {
        var parent = new AnonymousMaker();
        parent.firstName = "John";
        parent.lastName = "Doe";
        return parent.makeRunnable(17);
    }

    static void main(String[] argv) {
        makeRunnableOnly().run();
    }
}
