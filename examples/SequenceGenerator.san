// -*- mode: Java; -*-
package sanka.examples;

class Dependency {
    String item;
    String dependsOn;

    Dependency(item, dependsOn);
}

/**
 * Given a set of dependencies:
 * "A depends on B", "B depends on C", "A depends on C", etc.
 *
 * An item can only be processed after the items that it depends on have
 * been processed. Generate a legal sequence to process the items.
 */
class SequenceGenerator {
    const IN_PROGRESS = 1;
    const DONE = 2;

    []String sequence([]Dependency inputPairs) {
        // Put the pairs into a map for graph traversal.
        var dependencyMap = new map[String][]String;
        for (var pair : inputPairs) {
            var list = dependencyMap[pair.item];
            if (list == null) {
                list = new []String;
                dependencyMap[pair.item] = list;
            }
            list.add(pair.dependsOn);

            list = dependencyMap[pair.dependsOn];
            if (list == null) {
                list = new []String;
                dependencyMap[pair.dependsOn] = list;
            }
        }

        // BFS the graph.
        var results = new []String;
        var statusMap = new map[String]int;
        for (var item : dependencyMap) {
            bfs(item, statusMap, results, dependencyMap);
        }
        return results;
    }
    
    private void bfs(String item, map[String]int statusMap, []String results,
                     map[String][]String dependencyMap) {
        var status = statusMap[item];
        if (status == DONE) {
            return;
        }
        if (status == IN_PROGRESS) {
            System.println("loop detected");
            return;
        }
        statusMap[item] = IN_PROGRESS;
        for (var depItem : dependencyMap[item]) {
            bfs(depItem, statusMap, results, dependencyMap);
        }
        results.add(item);
        statusMap[item] = DONE;
    }

    static void main([]String argv) {
        var pairs = {
            new Dependency("A", "B"),
            new Dependency("A", "C"),
            new Dependency("C", "D"),
            new Dependency("E", "F")
        };
        var sequence = new SequenceGenerator().sequence(pairs);
        for (var item : sequence) {
            System.println(item);
        }
    }
}
