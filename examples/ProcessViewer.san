// -*- mode: Java; -*-
package sanka.examples;
import sanka.io.File;
import sanka.io.FileReader;
import sanka.io.FileStats;
import sanka.io.LineReader;

class Process {
    String name;
    int pid;
    int uid;
}

class ProcessViewer {
    /**
     * This is basically a terse, stupid "ps" command for Linux.
     */
    static void main([]String args) {
        var allUsers = false;
        var ignoreFile = null;
        var ignoreList = null;
        for (var idx = 1; idx < args.length; idx++) {
            switch (args[idx]) {
            case "-a":
                allUsers = true;
                break;
            case "-i":
                idx++;
                ignoreFile = args[idx];
                break;
            }
        }
        var viewer = new ProcessViewer();
        var processes = viewer.readProcesses();
        if (processes == null) {
            return;
        }
        if (ignoreFile != null) {
            ignoreList = viewer.readIgnoreFile(ignoreFile);
        }
        viewer.print(processes, ignoreList, allUsers);
    }

    /**
     * @return array of all processes running on Linux system
     */
    []Process readProcesses() {
        var procDir = new File("/proc");
        var filenames = procDir.list();
        if (filenames == null) {
            System.println("failed to read " + procDir.toString());
            return null;
        }
        var processes = new []Process;
        for (var name : filenames) {
            var ch = name[0];
            if (ch >= '0' && ch <= '9') {
                var process = readProcess(procDir, name);
                if (process != null) {
                    processes.add(process);
                }
            }
        }
        return processes;
    }

    /**
     * @return process name, uid, and pid.
     *
     * If process name is "java" then attempt to return main class as process name.
     */
    Process readProcess(File procDir, String name) {
        var processDir = new File(procDir, name);
        var stats = new FileStats();
        if (processDir.getStats(stats, true) != 0) {
            return null;
        }
        var process = new Process();
        process.pid = System.parseInt(name);
        process.uid = stats.uid;
        var cmdline = readCmdLine(processDir);
        if (cmdline != null && cmdline.length > 0) {
            name = cmdline[0];
            name = basename(name, '/');
            name = split(name, ':');
            name = split(name, ' ');
            if (name == "java") {
                var classname = getJavaMainClass(cmdline);
                if (classname != null) {
                    name = classname;
                }
            }
            process.name = name;
        } else {
            process.name = readNameFromStatusFile(processDir);
        }
        return process;
    }

    /**
     * Read Linux /proc cmdline file into a String array.
     */
    private []String readCmdLine(File processDir) {
        var statusFile = new File(processDir, "cmdline");
        var fileReader = new FileReader();
        if (fileReader.open(statusFile.getPath()) != 0) {
            return null;
        }
        var data = new []byte(4096);
        var length = fileReader.read(data);
        fileReader.close();
        if (length <= 0) {
            return null;
        }
        data.setLength(length);
        var args = new []String;
        var word = new []byte(length);
        var src = 0;
        while (src < length) {
            word.setLength(length-src);
            var dst = 0;
            while (src < length && data[src] != 0) {
                word[dst] = data[src];
                dst++;
                src++;
            }
            word.setLength(dst);
            args.add(new String(word));
            src++;
        }
        return args;
    }

    private static String basename(String name, byte ch) {
        var idx = name.lastIndexOf(ch);
        return (idx < 0) ? name : name.substring(idx+1);
    }

    private static String split(String name, byte ch) {
        var idx = name.indexOf(ch);
        return (idx <= 0) ? name : name.substring(0, idx);
    }

    /**
     * @return main class from Java command line.
     */
    private String getJavaMainClass([]String cmdline) {
        for (var idx = 1; idx < cmdline.length; idx++) {
            var arg = cmdline[idx];
            if (arg[0] != '-') {
                return arg;
            }
            if (arg == "-jar") {
                return basename(cmdline[idx+1], '/');
            }
            if (arg == "-cp" || arg == "-classpath") {
                idx++;
            }
        }
        return null;
    }

    /**
     * Read Linux /proc status file. Currently we only care about the Name field,
     * but we could easily record any other fields that are interesting.
     */
    private String readNameFromStatusFile(File processDir) {
        var statusFile = new File(processDir, "status");
        var fileReader = new FileReader();
        var status = fileReader.open(statusFile.getPath());
        if (status != 0) {
            return null;
        }
        var reader = new LineReader(fileReader);
        var name = null;
        while (name == null) {
            var line = reader.readline();
            if (line == null) {
                break;
            }
            var idx = line.indexOf(':');
            if (idx <= 0) {
                continue;
            }
            var tag = line.substring(0, idx);
            if (tag != "Name") {
                continue;
            }
            idx++;
            while (line[idx] == '\t' || line[idx] == ' ') {
                idx++;
            }
            name = line.substring(idx);
        }
        reader.close();
        return name;
    }

    /**
     * Read a file where each line is a process name in the first column, and
     * optionally a comment in the second column.
     */
    private []String readIgnoreFile(String filename) {
        var fileReader = new FileReader();
        var status = fileReader.open(filename);
        if (status != 0) {
            return null;
        }
        var reader = new LineReader(fileReader);
        var ignoreList = new []String;
        while (true) {
            var line = reader.readline();
            if (line == null) {
                break;
            }
            line = split(line, ' ');
            line = split(line, '\t');
            if (line != "") {
                ignoreList.add(line);
            }
        }
        reader.close();
        return ignoreList;
    }

    /**
     * Print my running processes to stdout.
     */
    void print([]Process processes, []String ignoreList, boolean allUsers) {
        var uid = System.getuid();
        var ignore = new map[String]boolean;
        if (ignoreList != null) {
            for (var name : ignoreList) {
                ignore[name] = true;
            }
        }
        for (var process : processes) {
            if (!allUsers && process.uid != uid) {
                continue;
            }
            if (ignore[process.name]) {
                continue;
            }
            if (allUsers) {
                System.println("" + process.pid + "\t" + process.uid + "\t" + process.name);
            } else {
                System.println("" + process.pid + "\t" + process.name);
            }
            // Don't print it again.
            ignore[process.name] = true;
        }
    }
}
